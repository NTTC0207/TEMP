import React, { useState } from 'react';
import './TreeNode.css'; // Import the CSS file for styling

const TreeNode = ({ citation, children }) => {
  const [expandedItems, setExpandedItems] = useState({});
  const [isExpanded, setExpanded] = useState(false);

  const toggleExpand = () => {
    setExpanded(!isExpanded);
  };

  const toggleParagraph = (index) => {
    setExpandedItems((prevExpandedItems) => ({
      ...prevExpandedItems,
      [index]: !prevExpandedItems[index],
    }));
  };

  return (
    <div className={`tree-node ${isExpanded ? 'expanded' : ''}`}>
      <div className="node-header">
        <div>
          {citation && (
            <div>
              {citation.items && citation.items.map((item, index) => (
                <div key={index} className="item-container">
                  <span>{item.title}</span>
                  <button onClick={() => toggleParagraph(index)}>
                    {expandedItems[index] ? 'Hide' : 'Show More'}
                  </button>
                  {expandedItems[index] && <p>{item.paragraph}</p>}
                </div>
              ))}
            </div>
          )}
        </div>
        {citation && citation.items && (
          <button onClick={toggleExpand}>{isExpanded ? 'Hide' : 'Show'} Children</button>
        )}
      </div>
      {isExpanded && <div className="children-container">{children}</div>}
    </div>
  );
};

export default TreeNode;



.tree-node {
  transition: margin-left 0.3s ease-in-out; /* Add transition for smooth margin change */
}

.node-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.item-container {
  margin-bottom: 10px;
}

.children-container {
  opacity: 0;
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.3s ease-in-out, opacity 0.3s ease-in-out;
}

.tree-node.expanded .children-container {
  opacity: 1;
  max-height: 1000px; /* Adjust the maximum height as needed */
}

